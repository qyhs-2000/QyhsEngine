#pragma once
{{#include_headfiles}}
#include "{{headfile_name}}"
{{/include_headfiles}}

namespace QYHS
{
	{{#class_defines}}class {{class_name}};
	{{/class_defines}}
	namespace Reflection
	{
		{{#class_defines}}namespace TypeFieldReflectionOperator
		{
			class Type{{class_name}}Operator
			{
			public:
				//class
				//static void get{{class_name}}BaseClassReflectionInstanceList()
				static const char* getClassName(){return "{{class_name}}";}
				static void* constructorWithJson(const Json & json_context)
				{
					{{class_name}} * ret_instance = new {{class_name}};
					Serializer::read(json_context,*ret_instance);
					return ret_instance;
				}
				static int get{{class_name}}BaseClassReflectionInstanceList(ReflectionInstance* &out_list, void* instance)
				{
					int count = {{class_base_class_size}};
					{{#class_has_base}}out_list = new ReflectionInstance[count];
					for(int i = 0;i<count;++i){
					{{#class_base_class_defines}}
						out_list[i] = TYPE_META_DEF({{class_base_class_name}},static_cast<{{class_name}}*>(instance));
					{{/class_base_class_defines}}
					}{{/class_has_base}}
					return count;	
				}
				static Json writeByName(void * instance_ptr)
				{
					return Serializer::write(*({{class_name}}*)instance_ptr);
				}
				//field
				{{#class_field_defines}}
				static void set_{{class_field_name}}(void * instance,void * field_value)
				{
					static_cast<{{class_name}}*>(instance)->{{class_field_name}} = *static_cast<{{{class_field_type}}}*>(field_value);
				}
				static void* get_{{class_field_name}}(void * instance)
				{
					return &(static_cast<{{class_name}}*>(instance)->{{class_field_name}});
				}
				static const char* getFieldName_{{class_field_name}}()
				{
					return "{{class_field_name}}";
				}
				static const char* getFieldTypeName_{{class_field_name}}()
				{
					return "{{{class_field_type}}}";
				}
				static bool isArray_{{class_field_name}}()
				{
					{{#class_field_is_vector}}return true;{{/class_field_is_vector}}{{^class_field_is_vector}}return false;{{/class_field_is_vector}}
				}
				{{/class_field_defines}}
			};
		}//namespace TypeFieldFunctionOperator

		{{#vector_exist}}namespace ArrayReflectionOperator
		{
		{{#vector_defines}}
		#ifndef Array{{vector_useful_name}}OperatorMacro
		#define Array{{vector_useful_name}}OperatorMacro
		class Array{{vector_useful_name}}Operator
		{
		public:
			static const char* getArrayTypeName(){return "{{{vector_type_name}}}";}
			static const char* getElementTypeName(){return "{{{vector_element_type_name}}}";}
			static int getSize(void * instance){return (static_cast<{{{vector_type_name}}}*>(instance)->size());}
			static void* get(int index,void * instance)
			{
				return static_cast<void*>(&((*static_cast<{{{vector_type_name}}}*>(instance))[index]));
			}
			static void set(int index,void * instance,void * value)
			{
				(*static_cast<{{{vector_type_name}}}*>(instance))[index] = *(static_cast<{{{vector_element_type_name}}}*>(value));
			}
		};
		#endif
		{{/vector_defines}}
		}//namespace ArrayFunctioinOperator{{/vector_exist}}
		{{/class_defines}}

		{{#class_defines}}
		void TypeWrapperRegister_{{class_name}}()
		{
		{{#class_field_defines}}
			FieldFunctionTuple * f_field_function_tuple_{{class_field_name}} = new FieldFunctionTuple(
			&TypeFieldReflectionOperator::Type{{class_name}}Operator::set_{{class_field_name}},
			&TypeFieldReflectionOperator::Type{{class_name}}Operator::get_{{class_field_name}},
			&TypeFieldReflectionOperator::Type{{class_name}}Operator::getClassName,
			&TypeFieldReflectionOperator::Type{{class_name}}Operator::getFieldName_{{class_field_name}},
			&TypeFieldReflectionOperator::Type{{class_name}}Operator::getFieldTypeName_{{class_field_name}},
			&TypeFieldReflectionOperator::Type{{class_name}}Operator::isArray_{{class_field_name}}
			);
			REGISTER_TO_FIELD_MAP("{{class_name}}",f_field_function_tuple_{{class_field_name}});
		{{/class_field_defines}}
		
		{{#vector_exist}}{{#vector_defines}} 
			ArrayFunctionTuple * array_function_tuple_{{vector_useful_name}} = new ArrayFunctionTuple(
			&ArrayReflectionOperator::Array{{vector_useful_name}}Operator::set,
			&ArrayReflectionOperator::Array{{vector_useful_name}}Operator::get,
			&ArrayReflectionOperator::Array{{vector_useful_name}}Operator::getSize,
			&ArrayReflectionOperator::Array{{vector_useful_name}}Operator::getArrayTypeName,
			&ArrayReflectionOperator::Array{{vector_useful_name}}Operator::getElementTypeName
		);
		REGISTER_TO_ARRAY_MAP("{{vector_useful_name}}",array_function_tuple_{{vector_useful_name}});
		{{/vector_defines}}
		{{/vector_exist}}
		{{#class_need_register}}ClassFunctionTuple * f_class_function_tuple_{{class_name}} = new ClassFunctionTuple(
            &TypeFieldReflectionOperator::Type{{class_name}}Operator::constructorWithJson,
            &TypeFieldReflectionOperator::Type{{class_name}}Operator::get{{class_name}}BaseClassReflectionInstanceList,
            &TypeFieldReflectionOperator::Type{{class_name}}Operator::writeByName
		);
		REGISTER_TO_CLASS_MAP("{{class_name}}",f_class_function_tuple_{{class_name}});
		{{/class_need_register}}
		}
		{{/class_defines}}
		namespace TypeWrappersRegister
		{
			{{#class_defines}}
			void {{class_name}}(){TypeWrapperRegister_{{class_name}}();}
			{{/class_defines}}
		}
		
	}
}